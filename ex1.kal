# basic
def foo(a b) a*a + 2*a*b + b*b;
def bar(a) foo(a, 4.0) + bar(31337);
extern cos(x);

# conditionals
def fib(x) 
    if (x < 3) then 
        1 
    else 
        fib(x-1)+fib(x-2);

fib(6);

# extern and for loop
extern putchard(char);

def printstar(n)
    for i = 1, i < n, 1.0 in
        putchard(42);  # ascii 42 = '*'

# print 100 '*' characters
printstar(100);

# 6.5 kicking tires

def unary ! (v) if v then 0 else 1;
def unary - (v) 0 - v;
def binary > 10 (LHS RHS) RHS < LHS;
def binary | 5 (LHS RHS) if LHS then 1 else if RHS then 1 else 0;
def binary & 6 (LHS RHS) if !LHS then 0 else !!RHS;
def binary = 9 (LHS RHS) !(LHS < RHS | LHS > RHS);
def binary : 1 (x y) y;

def printdensity(d)
    if d > 8 then
    putchard(32)  # ' '
    else if d > 4 then
    putchard(46)  # '.'
    else if d > 2 then
    putchard(43)  # '+'
    else
    putchard(42); # '*'

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def mandelconverger(real imag iters creal cimag)
    if iters > 255 | (real*real + imag*imag > 4) then iters
    else mandelconverger(
        real*real - imag*imag + creal, 2*real*imag + cimag,
                    iters+1, creal, cimag);

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
    mandelconverger(real, imag, 0, real, imag);

# Compute and plot the mandelbrot set with the specified 2 dimensional range
# info.
def mandelhelp(xmin xmax xstep   ymin ymax ystep)
    for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
        printdensity(mandelconverge(x,y)))
    : putchard(10)
    )

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart imagstart realmag imagmag)
    mandelhelp(realstart, realstart+realmag*78, realmag,
                imagstart, imagstart+imagmag*40, imagmag);


mandel(-2.3, -1.3, 0.05, 0.07);
mandel(-2, -1, 0.02, 0.04);
mandel(-0.9, -1.4, 0.02, 0.03);

